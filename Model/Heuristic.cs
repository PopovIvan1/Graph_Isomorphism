using System.Collections.Generic;
using System.Linq;

namespace Model
{
    /// <summary>
    /// Class heuristic - class for reducing the solution search time by applying heuristic methods.
    /// </summary>
    class Heuristic
    {
        /// <summary>
        /// New classes generated by heuristic methods
        /// </summary>
        private int[,] myNewEquivalenceClasses = null;

        /// <summary>
        /// Return new classes generated by heuristic methods
        /// </summary>
        public int[,] GenerateNewClasses(Graph theFirstGraph, Graph theSecondGraph, int[,] theOldEquivalenceClasses)
        {
            int[] aFirstGraphEquivalenceClasses = new int[theFirstGraph.GetGraphVerticesCount()];
            for (int i = 0; i < aFirstGraphEquivalenceClasses.Length; i++) 
            {
                aFirstGraphEquivalenceClasses[i] = theOldEquivalenceClasses[i, 0];
            }
            var aVerticesCountFromEquivalenceClasses = aFirstGraphEquivalenceClasses.GroupBy(anEquivalenceClass => anEquivalenceClass);
            var aMaxVerticesCount = aVerticesCountFromEquivalenceClasses.Max(anElement => ((ICollection<int>)anElement).Count);
            var aMaxEquivalenceClass = aVerticesCountFromEquivalenceClasses.First(e => ((ICollection<int>)e).Count == aMaxVerticesCount);
            //aMaxEquivalenceClass.Key
            return myNewEquivalenceClasses;
        }
    }
}
