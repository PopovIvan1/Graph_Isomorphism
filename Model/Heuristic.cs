using System.Collections.Generic;
using System.Linq;

namespace Model
{
    /// <summary>
    /// Class heuristic - class for reducing the solution search time by applying heuristic methods.
    /// </summary>
    class Heuristic
    {
        /// <summary>
        /// New classes generated by heuristic methods.
        /// </summary>
        private int[,] myNewEquivalenceClasses = null;

        /// <summary>
        /// Return new classes generated by heuristic methods.
        /// </summary>
        public int[,] GenerateNewClasses(Graph theFirstGraph, Graph theSecondGraph, int[,] theOldEquivalenceClasses)
        {
            int[] aFirstGraphEquivalenceClasses = new int[theFirstGraph.GetGraphVerticesCount()];
            int[] aSecondGraphEquivalenceClasses = new int[theFirstGraph.GetGraphVerticesCount()];
            for (int i = 0; i < aFirstGraphEquivalenceClasses.Length; i++) 
            {
                aFirstGraphEquivalenceClasses[i] = theOldEquivalenceClasses[i, 0];
                aSecondGraphEquivalenceClasses[i] = theOldEquivalenceClasses[i, 1];
            }
            var aVerticesCountFromEquivalenceClasses = aFirstGraphEquivalenceClasses.GroupBy(anEquivalenceClass => anEquivalenceClass);
            var aMaxVerticesCount = aVerticesCountFromEquivalenceClasses.Max(anElement => ((ICollection<int>)anElement).Count);
            var aMaxEquivalenceClass = aVerticesCountFromEquivalenceClasses.First(anElement => ((ICollection<int>)anElement).Count == aMaxVerticesCount);
            //aMaxEquivalenceClass.Key
            myNewEquivalenceClasses = new int[theFirstGraph.GetGraphVerticesCount(), 2];
            return myNewEquivalenceClasses;
        }

        /// <summary>
        /// Based on the fixation of two given vertices, generates new equivalence classes.
        /// </summary>
        private int[] setNewEquivalenceClasses(int[,] theGraphMatrix, int theVerticesCount, int[] theOldEquivalenceClasses, int theFixedVertex)
        {
            int[] aNewEquivalenceClasses = new int[theVerticesCount];
            int[] aGluingOldAndNewClasses = new int[theVerticesCount];
            for (int i = 0; i < theVerticesCount; i++)
            {
                aNewEquivalenceClasses[i] = 0;
                aGluingOldAndNewClasses[i] = 0;
            }
            int anEquivalenceClassNumber = 1;
            aNewEquivalenceClasses[theFixedVertex] = anEquivalenceClassNumber;
            int anOldEquivalenceClassNumber = -1;
            while (anEquivalenceClassNumber != anOldEquivalenceClassNumber)
            {
                anOldEquivalenceClassNumber = anEquivalenceClassNumber;
                for (int i = 0; i < theVerticesCount; i++)
                {
                    if (aNewEquivalenceClasses[i] == anOldEquivalenceClassNumber)
                    {
                        for (int j = 0; j < theVerticesCount; j++)
                        {
                            if (theGraphMatrix[i, j] == 1) 
                            {
                                if (aNewEquivalenceClasses[j] == 0)
                                {
                                    if (anEquivalenceClassNumber == anOldEquivalenceClassNumber) anEquivalenceClassNumber++;
                                    aNewEquivalenceClasses[j] = anEquivalenceClassNumber;
                                }
                            }
                        }
                    }
                }
            }
            anEquivalenceClassNumber = 1;
            for (int i = 0; i < theVerticesCount; i++)
            {
                if (aGluingOldAndNewClasses[i] == 0)
                {
                    aGluingOldAndNewClasses[i] = anEquivalenceClassNumber;
                    anEquivalenceClassNumber++;
                    for (int j = 0; j < theVerticesCount; j++)
                    {
                        if (aNewEquivalenceClasses[j] == aNewEquivalenceClasses[i] && theOldEquivalenceClasses[j] == theOldEquivalenceClasses[i])
                            aGluingOldAndNewClasses[j] = aGluingOldAndNewClasses[i];
                    }
                }
            }
            return aGluingOldAndNewClasses;
        }
    }
}
